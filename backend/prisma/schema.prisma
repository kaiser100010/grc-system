// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String
  lastName    String
  password    String
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  
  // Relationships
  createdTasks     Task[]          @relation("TaskCreatedBy")
  assignedTasks    TaskAssignment[]
  createdRisks     Risk[]          @relation("RiskCreatedBy")
  assignedRisks    RiskAssignment[]
  createdControls  Control[]       @relation("ControlCreatedBy")
  assignedControls ControlAssignment[]
  createdIncidents Incident[]      @relation("IncidentCreatedBy")
  assignedIncidents IncidentAssignment[]
  createdPolicies  Policy[]        @relation("PolicyCreatedBy")
  createdEvidence  Evidence[]      @relation("EvidenceCreatedBy")
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  AUDITOR
}

// Employee model
model Employee {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  email        String   @unique
  employeeId   String   @unique
  phone        String?
  position     String
  department   Department
  location     String
  startDate    DateTime
  endDate      DateTime?
  managerId    String?
  manager      Employee? @relation("ManagerEmployee", fields: [managerId], references: [id])
  directReports Employee[] @relation("ManagerEmployee")
  status       EmployeeStatus @default(ACTIVE)
  skills       String[]
  clearanceLevel String @default("NONE")
  notes        String?
  
  // Relationships with other modules
  taskAssignments    TaskAssignment[]
  riskAssignments    RiskAssignment[]
  controlAssignments ControlAssignment[]
  incidentAssignments IncidentAssignment[]
  
  // Audit fields
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  updatedBy    String
  
  @@map("employees")
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
}

enum Department {
  IT
  HR
  FINANCE
  OPERATIONS
  LEGAL
  SECURITY
  COMPLIANCE
}

// Task model
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  
  // Relationships
  createdBy   String
  creator     User @relation("TaskCreatedBy", fields: [createdBy], references: [id])
  assignments TaskAssignment[]
  
  // Links to other entities
  riskId      String?
  risk        Risk? @relation(fields: [riskId], references: [id])
  controlId   String?
  control     Control? @relation(fields: [controlId], references: [id])
  incidentId  String?
  incident    Incident? @relation(fields: [incidentId], references: [id])
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("tasks")
}

model TaskAssignment {
  id         String @id @default(cuid())
  taskId     String
  task       Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId     String?
  user       User? @relation(fields: [userId], references: [id])
  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id])
  assignedAt DateTime @default(now())
  
  @@unique([taskId, userId])
  @@unique([taskId, employeeId])
  @@map("task_assignments")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Risk model
model Risk {
  id            String     @id @default(cuid())
  title         String
  description   String?
  category      RiskCategory
  likelihood    Int        // 1-5 scale
  impact        Int        // 1-5 scale
  riskLevel     RiskLevel  // Calculated from likelihood * impact
  status        RiskStatus @default(IDENTIFIED)
  riskOwner     String?
  
  // Mitigation
  mitigationPlan String?
  residualRisk   Int?
  reviewDate     DateTime?
  
  // Relationships
  createdBy     String
  creator       User @relation("RiskCreatedBy", fields: [createdBy], references: [id])
  assignments   RiskAssignment[]
  controls      Control[]
  tasks         Task[]
  
  // Audit fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("risks")
}

model RiskAssignment {
  id         String @id @default(cuid())
  riskId     String
  risk       Risk @relation(fields: [riskId], references: [id], onDelete: Cascade)
  userId     String?
  user       User? @relation(fields: [userId], references: [id])
  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id])
  role       String // Owner, Reviewer, etc.
  assignedAt DateTime @default(now())
  
  @@unique([riskId, userId])
  @@unique([riskId, employeeId])
  @@map("risk_assignments")
}

enum RiskCategory {
  OPERATIONAL
  FINANCIAL
  STRATEGIC
  COMPLIANCE
  TECHNOLOGY
  REPUTATIONAL
}

enum RiskLevel {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum RiskStatus {
  IDENTIFIED
  ASSESSED
  MITIGATED
  MONITORED
  CLOSED
}

// Control model
model Control {
  id            String        @id @default(cuid())
  title         String
  description   String?
  controlType   ControlType
  framework     Framework
  frequency     Frequency
  status        ControlStatus @default(DRAFT)
  effectiveness ControlEffectiveness @default(NOT_TESTED)
  
  // Implementation details
  owner         String?
  implementation String?
  testingNotes   String?
  lastTested     DateTime?
  nextReview     DateTime?
  
  // Relationships
  createdBy     String
  creator       User @relation("ControlCreatedBy", fields: [createdBy], references: [id])
  assignments   ControlAssignment[]
  riskId        String?
  risk          Risk? @relation(fields: [riskId], references: [id])
  tasks         Task[]
  evidence      Evidence[]
  
  // Audit fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("controls")
}

model ControlAssignment {
  id         String @id @default(cuid())
  controlId  String
  control    Control @relation(fields: [controlId], references: [id], onDelete: Cascade)
  userId     String?
  user       User? @relation(fields: [userId], references: [id])
  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id])
  role       String // Owner, Tester, Reviewer
  assignedAt DateTime @default(now())
  
  @@unique([controlId, userId])
  @@unique([controlId, employeeId])
  @@map("control_assignments")
}

enum ControlType {
  PREVENTIVE
  DETECTIVE
  CORRECTIVE
  COMPENSATING
}

enum Framework {
  SOX
  COSO
  ISO27001
  NIST
  COBIT
  CUSTOM
}

enum Frequency {
  CONTINUOUS
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  AD_HOC
}

enum ControlStatus {
  DRAFT
  ACTIVE
  INACTIVE
  RETIRED
}

enum ControlEffectiveness {
  NOT_TESTED
  EFFECTIVE
  PARTIALLY_EFFECTIVE
  INEFFECTIVE
}

// Incident model
model Incident {
  id            String         @id @default(cuid())
  title         String
  description   String?
  severity      Severity
  status        IncidentStatus @default(REPORTED)
  category      IncidentCategory
  
  // Timeline
  reportedAt    DateTime       @default(now())
  detectedAt    DateTime?
  resolvedAt    DateTime?
  
  // Impact assessment
  businessImpact String?
  financialImpact Float?
  affectedSystems String[]
  
  // Resolution
  rootCause     String?
  resolution    String?
  lessonsLearned String?
  
  // Relationships
  createdBy     String
  creator       User @relation("IncidentCreatedBy", fields: [createdBy], references: [id])
  assignments   IncidentAssignment[]
  tasks         Task[]
  
  // Audit fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("incidents")
}

model IncidentAssignment {
  id         String @id @default(cuid())
  incidentId String
  incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  userId     String?
  user       User? @relation(fields: [userId], references: [id])
  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id])
  role       String // Investigator, Owner, etc.
  assignedAt DateTime @default(now())
  
  @@unique([incidentId, userId])
  @@unique([incidentId, employeeId])
  @@map("incident_assignments")
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  REPORTED
  INVESTIGATING
  RESOLVED
  CLOSED
}

enum IncidentCategory {
  SECURITY
  OPERATIONAL
  COMPLIANCE
  DATA_BREACH
  SYSTEM_FAILURE
  OTHER
}

// Policy model
model Policy {
  id            String       @id @default(cuid())
  title         String
  description   String?
  content       String       // Rich text content
  version       String       @default("1.0")
  status        PolicyStatus @default(DRAFT)
  
  // Lifecycle
  effectiveDate DateTime?
  reviewDate    DateTime?
  approvedBy    String?
  approvedAt    DateTime?
  
  // Relationships
  createdBy     String
  creator       User @relation("PolicyCreatedBy", fields: [createdBy], references: [id])
  evidence      Evidence[]
  
  // Audit fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("policies")
}

enum PolicyStatus {
  DRAFT
  REVIEW
  APPROVED
  EFFECTIVE
  RETIRED
}

// Evidence model
model Evidence {
  id          String       @id @default(cuid())
  title       String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  category    EvidenceCategory
  
  // Relationships
  createdBy   String
  creator     User @relation("EvidenceCreatedBy", fields: [createdBy], references: [id])
  controlId   String?
  control     Control? @relation(fields: [controlId], references: [id])
  policyId    String?
  policy      Policy? @relation(fields: [policyId], references: [id])
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("evidence")
}

enum EvidenceCategory {
  CONTROL_TESTING
  POLICY_DOCUMENTATION
  AUDIT_REPORT
  SCREENSHOT
  OTHER
}

// Audit log model
model AuditLog {
  id         String   @id @default(cuid())
  action     String   // CREATE, UPDATE, DELETE, etc.
  resource   String   // EMPLOYEE, TASK, RISK, etc.
  resourceId String
  details    Json?    // JSON object with change details
  userId     String?
  userEmail  String?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  
  @@map("audit_logs")
}

// Vendor model (placeholder for future)
model Vendor {
  id            String      @id @default(cuid())
  name          String
  contactEmail  String
  contactPhone  String?
  address       String?
  status        VendorStatus @default(ACTIVE)
  riskLevel     RiskLevel    @default(LOW)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("vendors")
}

enum VendorStatus {
  ACTIVE
  INACTIVE
  PENDING
}

// System model (placeholder for future)
model System {
  id          String       @id @default(cuid())
  name        String
  description String?
  owner       String
  status      SystemStatus @default(ACTIVE)
  criticality Priority     @default(MEDIUM)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("systems")
}

enum SystemStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DEPRECATED
}

// Asset model (placeholder for future)
model Asset {
  id       String    @id @default(cuid())
  name     String
  type     AssetType
  owner    String
  status   AssetStatus @default(ACTIVE)
  value    Float?
  location String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("assets")
}

enum AssetType {
  HARDWARE
  SOFTWARE
  DATA
  FACILITY
}

enum AssetStatus {
  ACTIVE
  INACTIVE
  DISPOSED
}