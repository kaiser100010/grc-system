version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: grc_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-grc_production}
      POSTGRES_USER: ${DB_USER:-grc_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - grc_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-grc_user} -d ${DB_NAME:-grc_production}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: grc_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - grc_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: grc_backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-grc_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-grc_production}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ../backend/uploads:/app/uploads
    networks:
      - grc_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: grc_frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - grc_network
    depends_on:
      - backend

  nginx:
    image: nginx:alpine
    container_name: grc_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs
    networks:
      - grc_network
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  grc_network:
    driver: bridge